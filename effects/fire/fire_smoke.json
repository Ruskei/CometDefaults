{
  "macros": {
    "speed": "0.4",
    "life": "80.0",
    "size": {
      "type": "hermite",
      "input": "particle.age",
      "x": [
        0.0,
        5.0,
        35.0,
        45.0
      ],
      "y": [
        0.0,
        0.5,
        4.0,
        2.0
      ]
    },
    "factor": "(particle_variable.random * 0.5 + 0.75)",
    "fire_spread": "0.07"
  },
  "components": {
    "randoms": {
      "particle": 1
    },
    "display_type": "center",
    "emitter_rate_steady": {
      "spawn_rate": 5
    },
    "_interval_update_frequency": {
      "interval": 5,
      "offset": 1
    },
    "initial_expression_position": {
      "x": "(Math.random() - 0.5) * 0.3",
      "y": "(Math.random()) * 0.3",
      "z": "(Math.random() - 0.5) * 0.3"
    },
    "motion_position": {
      "random_velocity": {
        "magnitude": 0.03,
        "bias": {
          "direction": [
            0.0,
            1.0,
            0.0
          ],
          "spread": 0.5
        }
      },
      "acceleration": {
        "x": "(Math.random() - 0.5) * fire_spread",
        "y": "0.01 * Math.random() + 0.015",
        "z": "(Math.random() - 0.5) * fire_spread"
      },
      "drag": "0.2",
      "restitution": "0.5"
    },
    "expression_scale": {
      "x": "size * factor",
      "y": "size * factor",
      "z": "size * factor"
    },
    "expression_rotation": {
      "x": "0.0",
      "y": "0.0",
      "z": "particle_variable.random * Math.PI * 2 + particle.age * 0.01"
    },
    "particle_lifetime_expression": {
      "max_lifetime": "35.0 + particle_variable.random * 10.0"
    },
    "constant_sprite": {
      "sprite": "particle"
    },
    "gradient_color": {
      "interpolant": "particle.age / (particle.maxLife)",
      "data": [
        {
          "index": 0.0,
          "color": "new Color(55, 55, 55, 255)"
        },
        {
          "index": 0.7,
          "color": "new Color(55, 55, 55, 255)"
        },
        {
          "index": 1.1,
          "color": "new Color(55, 55, 55, 128)"
        }
      ]
    },
    "timed_emitter_lifetime": {
      "expiration_expression": "emitter.age - 100.0"
    }
  }
}
